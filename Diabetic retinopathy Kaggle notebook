{
  "cells": [
    {
      "metadata": {
        "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
        "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
        "trusted": true
      },
      "cell_type": "code",
      "source": "import numpy as np \nimport pandas as pd \nimport os, random, sys, cv2, matplotlib, csv, keras\nfrom subprocess import check_output\nfrom datetime import datetime\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Conv2D, MaxPooling2D, Dropout, Flatten\nfrom keras.preprocessing.image import ImageDataGenerator, array_to_img, img_to_array, load_img\nfrom keras.optimizers import SGD, Adam\nfrom sklearn.model_selection import train_test_split\nfrom keras.utils import to_categorical\nfrom keras.preprocessing import image",
      "execution_count": 20,
      "outputs": []
    },
    {
      "metadata": {
        "_cell_guid": "79c7e3d0-c299-4dcb-8224-4455121ee9b0",
        "_uuid": "d629ff2d2480ee46fbb7e2d37f6b5fab8052498a",
        "trusted": true
      },
      "cell_type": "code",
      "source": "NUM_CLASSES = 5\n\n# we need images of same size so we convert them into the size\nWIDTH = 128\nHEIGHT = 128\nDEPTH = 3\ninputShape = (HEIGHT, WIDTH, DEPTH)\n\n# initialize number of epochs to train for, initial learning rate and batch size\nEPOCHS = 15\nINIT_LR = 1e-3\nBS = 32",
      "execution_count": 21,
      "outputs": []
    },
    {
      "metadata": {
        "trusted": true,
        "_uuid": "49074dd69c14b4533243ccaa7db8f630856664d0",
        "_kg_hide-output": false,
        "scrolled": false
      },
      "cell_type": "code",
      "source": "#Storing images in image-data pair\n\nprint(\"Loading images at...\"+ str(datetime.now()))\nsys.stdout.flush()\n\nImageNameDataHash = {}            #For storing image information in image-data pair\nimages = os.listdir(\"/kaggle/working/../input/\")\n\nfor imageFileName in images:\n    if(imageFileName == \"trainLabels.csv\"):\n        continue\n    img = load_img(os.path.join(os.path.sep, \"/kaggle/working/../input/\", imageFileName))\n    arr = img_to_array(img)\n    dim1 = arr.shape[0]\n    dim2 = arr.shape[1]\n    dim3 = arr.shape[2]\n    if (dim1 < HEIGHT or dim2 < WIDTH or dim3 < DEPTH):\n        print(\"Error image dimensions are less than expected \"+str(arr.shape))\n    \n    arr = cv2.resize(arr, (HEIGHT,WIDTH))       \n    \n    dim1 = arr.shape[0]\n    dim2 = arr.shape[1]\n    dim3 = arr.shape[2]\n    \n    if (dim1 != HEIGHT or dim2 != WIDTH or dim3 != DEPTH):\n        print(\"Error after resize, image dimensions are not equal to expected \"+str(arr.shape))\n    \n    arr = np.array(arr, dtype=\"float\") / 255.0\n    imageFileName = imageFileName.replace('.jpeg','')\n    \n    ImageNameDataHash[str(imageFileName)] = np.array(arr)       #Storing Image-data pair\n        \nprint(\"Loaded \" + str(len(ImageNameDataHash)) + \" images at...\"+ str(datetime.now())) ",
      "execution_count": 22,
      "outputs": [
        {
          "output_type": "stream",
          "text": "Loading images at...2019-01-24 21:13:58.601691\nLoaded 1000 images at...2019-01-24 21:17:59.538491\n",
          "name": "stdout"
        }
      ]
    },
    {
      "metadata": {
        "trusted": true,
        "_uuid": "8dce731a7ad43adc4091339f165a96e5bb4a59e0"
      },
      "cell_type": "code",
      "source": "random.seed(10)\nprint(\"Reading trainLabels.csv...\")\ndf = pd.read_csv('/kaggle/working/../input/trainLabels.csv', sep=',')\nprint(type(df))\n\nrow_count = df.shape[0]\ncol_count = df.shape[1]\nprint(\"row_count=\"+str(row_count)+\" col count=\"+str(col_count))\n\ndf[\"PatientID\"] = ''\nheader_list = list(df.columns)\nprint(header_list)\n\nImageLevelHash = {}     # Storing Image-level pair\npatientIDList = []\nuniquePatientIDList = []\n\nfor index, row in df.iterrows():\n    key = row[0] + ''\n    patientID = row[0] + ''\n    patientID = patientID.replace('_right', '')\n    patientID = patientID.replace('_left', '')\n    df.at[index, 'PatientID'] = patientID\n    patientIDList.append(patientID)\n    ImageLevelHash[key] = str(row[1])\n    \nuniquePatientIDList = sorted(set(patientIDList))\ncount = 0\n\nfor patientID in uniquePatientIDList:\n    left_level = ImageLevelHash[str(patientID + '_left')]\n    right_level = ImageLevelHash[str(patientID + '_right')]\n    \n    if(left_level != right_level):\n        count = count + 1\n\nprint(\"count of images with both left and right eye level not matching=\"+str(count))\nprint(\"number of unique patients=\"+str(len(uniquePatientIDList)))",
      "execution_count": 23,
      "outputs": [
        {
          "output_type": "stream",
          "text": "Reading trainLabels.csv...\n<class 'pandas.core.frame.DataFrame'>\nrow_count=35126 col count=2\n['image', 'level', 'PatientID']\ncount of images with both left and right eye level not matching=2240\nnumber of unique patients=17563\n",
          "name": "stdout"
        }
      ]
    },
    {
      "metadata": {
        "trusted": true,
        "_uuid": "1aa1a36377436490060579f1b5cdf9f4916ed760"
      },
      "cell_type": "code",
      "source": "#Merging two dataframes to give columns/features as follows: ['image', 'data', 'level', 'PatientID']\n\nimageNameArr = []\ndataArr = []\n\nkeepImages =  list(ImageNameDataHash.keys())\ndf = df[df['image'].isin(keepImages)]\nfor index, row in df.iterrows():\n    key = str(row[0])\n    if key in ImageNameDataHash:\n        imageNameArr.append(key)\n        dataArr.append(np.array(ImageNameDataHash[key]))\n        \ndf2 = pd.DataFrame({'image': imageNameArr, 'data': dataArr})\ndf2_header_list = list(df2.columns)\n        \ndf = pd.merge(df2, df, left_on='image', right_on='image', how='outer')\ndf_header_list = list(df.columns) \nprint(df_header_list) # 'image', 'data', level', 'PatientID'\nprint(len(df)) # 1000\nprint(df.sample())",
      "execution_count": 24,
      "outputs": [
        {
          "output_type": "stream",
          "text": "['image', 'data', 'level', 'PatientID']\n1000\n        image    ...    PatientID\n158  190_left    ...          190\n\n[1 rows x 4 columns]\n",
          "name": "stdout"
        }
      ]
    },
    {
      "metadata": {
        "trusted": true,
        "_uuid": "bc6a37972c9b09ecdfa03a4573715633467b86df"
      },
      "cell_type": "code",
      "source": "#Plotting a sample data\n\nsample = df.loc[df.index[0], 'data']\nprint(\"Sample Image\")\nprint(type(sample)) # <class 'numpy.ndarray'>\nprint(sample.shape) # 128,128,3\nfrom matplotlib import pyplot as plt\nplt.imshow(sample, interpolation='nearest')\nplt.show()",
      "execution_count": 25,
      "outputs": [
        {
          "output_type": "stream",
          "text": "Sample Image\n<class 'numpy.ndarray'>\n(128, 128, 3)\n",
          "name": "stdout"
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": "<Figure size 432x288 with 1 Axes>",
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "metadata": {
        "trusted": true,
        "_uuid": "f879a7908365f3f364285bdd8985b7fe455676aa"
      },
      "cell_type": "code",
      "source": "#Partitioning of data in 60:20:20 ratio for training, evaluation, testing respectively\n\nX = df['data']\nY = to_categorical(np.array(df['level']), num_classes=NUM_CLASSES)\nprint(\"Partition of image into 60:20:20\")\nsys.stdout.flush()\nunique_ids = df.PatientID.unique()\nprint('unique_ids shape='+ str(len(unique_ids))) #500\n\ntrain_ids, not_train_ids = train_test_split(unique_ids, test_size = 0.40, random_state = 10)\nvalid_ids, test_ids = train_test_split(not_train_ids, test_size = 0.50, random_state = 10)\n\ntrainid_list = train_ids.tolist()\nvalidid_list = valid_ids.tolist()\ntestid_list = test_ids.tolist()\n\ntraindf = df[df.PatientID.isin(trainid_list)]\nvalSet = df[df.PatientID.isin(validid_list)]\ntestSet = df[df.PatientID.isin(testid_list)]\n\ntraindf = traindf.reset_index(drop=True)\nvalSet = valSet.reset_index(drop=True)\ntestSet = testSet.reset_index(drop=True)\nprint(traindf.head())\nprint(valSet.head())\nprint(testSet.head())",
      "execution_count": 26,
      "outputs": [
        {
          "output_type": "stream",
          "text": "Partition of image into 60:20:20\nunique_ids shape=500\n      image    ...    PatientID\n0   10_left    ...           10\n1  10_right    ...           10\n2   15_left    ...           15\n3  15_right    ...           15\n4   16_left    ...           16\n\n[5 rows x 4 columns]\n      image    ...    PatientID\n0   13_left    ...           13\n1  13_right    ...           13\n2   20_left    ...           20\n3  20_right    ...           20\n4   21_left    ...           21\n\n[5 rows x 4 columns]\n      image    ...    PatientID\n0   58_left    ...           58\n1  58_right    ...           58\n2   74_left    ...           74\n3  74_right    ...           74\n4   75_left    ...           75\n\n[5 rows x 4 columns]\n",
          "name": "stdout"
        }
      ]
    },
    {
      "metadata": {
        "trusted": true,
        "_uuid": "0c986f647b09b9388cb7e04ab01660577807633a"
      },
      "cell_type": "code",
      "source": "#Saving data and level of each image in separate lists, each for training, evaluating and testing\n\ntrainX = traindf['data']\ntrainY = traindf['level']\n\nvalX = valSet['data']\nvalY = valSet['level']\n\ntestX = testSet['data']\ntestY = testSet['level']\n\nprint('trainX shape=', trainX.shape[0], 'valX shape=', valX.shape[0], 'testX shape=', testX.shape[0]) ",
      "execution_count": 27,
      "outputs": [
        {
          "output_type": "stream",
          "text": "trainX shape= 600 valX shape= 200 testX shape= 200\n",
          "name": "stdout"
        }
      ]
    },
    {
      "metadata": {
        "trusted": true,
        "_uuid": "b9c47a97a6d5069c4d252042c48c238d69bcc580"
      },
      "cell_type": "code",
      "source": "trainY =  to_categorical(trainY, num_classes=NUM_CLASSES)\nvalY =  to_categorical(valY, num_classes=NUM_CLASSES)\ntestY =  to_categorical(testY, num_classes=NUM_CLASSES)",
      "execution_count": 28,
      "outputs": []
    },
    {
      "metadata": {
        "trusted": true,
        "_uuid": "009f6f8546fd0d351d47a0abd054eb6dc3cc1b89"
      },
      "cell_type": "code",
      "source": "#Reshaping Image Data\n\nfrom numpy import zeros\n\nXtrain = np.zeros([trainX.shape[0],HEIGHT, WIDTH, DEPTH])\nfor i in range(trainX.shape[0]): # 0 to (traindf Size - 1)\n    Xtrain[i] = trainX[i]\nXval = np.zeros([valX.shape[0],HEIGHT, WIDTH, DEPTH])\nfor i in range(valX.shape[0]): # 0 to (traindf Size - 1)\n    Xval[i] = valX[i]\nXtest = np.zeros([testX.shape[0],HEIGHT, WIDTH, DEPTH])\nfor i in range(testX.shape[0]): # 0 to (traindf Size - 1)\n    Xtest[i] = testX[i]\n\nprint(Xtrain.shape) # (600,128,128,3)\nprint(Xval.shape) # (200,128,128,3)\nprint(Xtest.shape) # (200,128,128,3)",
      "execution_count": 29,
      "outputs": [
        {
          "output_type": "stream",
          "text": "(600, 128, 128, 3)\n(200, 128, 128, 3)\n(200, 128, 128, 3)\n",
          "name": "stdout"
        }
      ]
    },
    {
      "metadata": {
        "trusted": true,
        "_uuid": "9f1e4efadfe5e985327143a2385d6173de314c07"
      },
      "cell_type": "code",
      "source": "model = Sequential()\nmodel.add(Conv2D(32, (3, 3), padding='same', activation='relu', input_shape=inputShape))\nmodel.add(Conv2D(32, (3, 3), activation='relu'))\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\nmodel.add(Dropout(0.25))",
      "execution_count": 30,
      "outputs": []
    },
    {
      "metadata": {
        "trusted": true,
        "_uuid": "775d8d0b6f561e7fc5587bbf0efbef9449fd544d"
      },
      "cell_type": "code",
      "source": "model.add(Conv2D(64, (3, 3), padding='same', activation='relu'))\nmodel.add(Conv2D(64, (3, 3), activation='relu'))\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\nmodel.add(Dropout(0.25))",
      "execution_count": 31,
      "outputs": []
    },
    {
      "metadata": {
        "trusted": true,
        "_uuid": "7b8c90d1e776679ba2ab5425236b6b400a464ecc"
      },
      "cell_type": "code",
      "source": "model.add(Conv2D(64, (3, 3), padding='same', activation='relu'))\nmodel.add(Conv2D(64, (3, 3), activation='relu'))\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\nmodel.add(Dropout(0.25))",
      "execution_count": 32,
      "outputs": []
    },
    {
      "metadata": {
        "trusted": true,
        "_uuid": "64a507c2f6d8dbf1d6c55dde6baaf79dd30525ab"
      },
      "cell_type": "code",
      "source": "model.add(Flatten())\nmodel.add(Dense(512, activation='relu'))\nmodel.add(Dropout(0.5))\nmodel.add(Dense(output_dim=NUM_CLASSES, activation='softmax')) \nopt = Adam(lr=INIT_LR, decay=INIT_LR / EPOCHS)",
      "execution_count": 33,
      "outputs": [
        {
          "output_type": "stream",
          "text": "/opt/conda/lib/python3.6/site-packages/ipykernel_launcher.py:4: UserWarning: Update your `Dense` call to the Keras 2 API: `Dense(activation=\"softmax\", units=5)`\n  after removing the cwd from sys.path.\n",
          "name": "stderr"
        }
      ]
    },
    {
      "metadata": {
        "trusted": true,
        "_uuid": "cecbde20080e812eeeff2c6262e7995b5614de1d"
      },
      "cell_type": "code",
      "source": "print(\"compiling model..\")\nsys.stdout.flush()\nmodel.compile(loss=\"categorical_crossentropy\", optimizer=opt, metrics=[\"accuracy\"])",
      "execution_count": 34,
      "outputs": [
        {
          "output_type": "stream",
          "text": "compiling model..\n",
          "name": "stdout"
        }
      ]
    },
    {
      "metadata": {
        "trusted": true,
        "_uuid": "80d6284200bbc247f76e331aa6f2a6ed90af5ef6"
      },
      "cell_type": "code",
      "source": "#summary\nfrom keras.utils import print_summary\nprint_summary(model, line_length=None, positions=None, print_fn=None)",
      "execution_count": 16,
      "outputs": [
        {
          "output_type": "stream",
          "text": "_________________________________________________________________\nLayer (type)                 Output Shape              Param #   \n=================================================================\nconv2d_1 (Conv2D)            (None, 128, 128, 32)      896       \n_________________________________________________________________\nconv2d_2 (Conv2D)            (None, 126, 126, 32)      9248      \n_________________________________________________________________\nmax_pooling2d_1 (MaxPooling2 (None, 63, 63, 32)        0         \n_________________________________________________________________\ndropout_1 (Dropout)          (None, 63, 63, 32)        0         \n_________________________________________________________________\nconv2d_3 (Conv2D)            (None, 63, 63, 64)        18496     \n_________________________________________________________________\nconv2d_4 (Conv2D)            (None, 61, 61, 64)        36928     \n_________________________________________________________________\nmax_pooling2d_2 (MaxPooling2 (None, 30, 30, 64)        0         \n_________________________________________________________________\ndropout_2 (Dropout)          (None, 30, 30, 64)        0         \n_________________________________________________________________\nconv2d_5 (Conv2D)            (None, 30, 30, 64)        36928     \n_________________________________________________________________\nconv2d_6 (Conv2D)            (None, 28, 28, 64)        36928     \n_________________________________________________________________\nmax_pooling2d_3 (MaxPooling2 (None, 14, 14, 64)        0         \n_________________________________________________________________\ndropout_3 (Dropout)          (None, 14, 14, 64)        0         \n_________________________________________________________________\nflatten_1 (Flatten)          (None, 12544)             0         \n_________________________________________________________________\ndense_1 (Dense)              (None, 512)               6423040   \n_________________________________________________________________\ndropout_4 (Dropout)          (None, 512)               0         \n_________________________________________________________________\ndense_2 (Dense)              (None, 5)                 2565      \n=================================================================\nTotal params: 6,565,029\nTrainable params: 6,565,029\nNon-trainable params: 0\n_________________________________________________________________\n",
          "name": "stdout"
        }
      ]
    },
    {
      "metadata": {
        "trusted": true,
        "_uuid": "44ebe6d43752bfa48af0eede58d65499da316d82"
      },
      "cell_type": "code",
      "source": "#construct the image generator for data augmentation\nprint(\"Generating images...\")\nsys.stdout.flush()\naug = ImageDataGenerator(rotation_range=30, width_shift_range=0.1, height_shift_range=0.1, shear_range=0.2, zoom_range=0.2, horizontal_flip=True, fill_mode=\"nearest\")\n\nprint(\"training network...\")\nsys.stdout.flush()\n\nH = model.fit_generator(aug.flow(Xtrain, trainY, batch_size=BS), validation_data=(Xval, valY), steps_per_epoch=len(trainX) // BS, epochs=EPOCHS, verbose=1)",
      "execution_count": 35,
      "outputs": [
        {
          "output_type": "stream",
          "text": "Generating images...\ntraining network...\nEpoch 1/15\n18/18 [==============================] - 45s 3s/step - loss: 1.1143 - acc: 0.6823 - val_loss: 0.9613 - val_acc: 0.7500\nEpoch 2/15\n18/18 [==============================] - 43s 2s/step - loss: 0.9410 - acc: 0.7239 - val_loss: 0.8730 - val_acc: 0.7500\nEpoch 3/15\n18/18 [==============================] - 43s 2s/step - loss: 0.9530 - acc: 0.7114 - val_loss: 0.8803 - val_acc: 0.7500\nEpoch 4/15\n18/18 [==============================] - 44s 2s/step - loss: 0.8776 - acc: 0.7356 - val_loss: 0.8659 - val_acc: 0.7500\nEpoch 5/15\n18/18 [==============================] - 44s 2s/step - loss: 0.9710 - acc: 0.7192 - val_loss: 0.8756 - val_acc: 0.7500\nEpoch 6/15\n18/18 [==============================] - 43s 2s/step - loss: 0.9324 - acc: 0.7244 - val_loss: 0.8722 - val_acc: 0.7500\nEpoch 7/15\n18/18 [==============================] - 44s 2s/step - loss: 0.9641 - acc: 0.6997 - val_loss: 0.8721 - val_acc: 0.7500\nEpoch 8/15\n18/18 [==============================] - 44s 2s/step - loss: 0.9128 - acc: 0.7349 - val_loss: 0.8677 - val_acc: 0.7500\nEpoch 9/15\n18/18 [==============================] - 43s 2s/step - loss: 0.9254 - acc: 0.7222 - val_loss: 0.8721 - val_acc: 0.7500\nEpoch 10/15\n18/18 [==============================] - 44s 2s/step - loss: 0.9569 - acc: 0.7188 - val_loss: 0.8693 - val_acc: 0.7500\nEpoch 11/15\n18/18 [==============================] - 43s 2s/step - loss: 0.9715 - acc: 0.7124 - val_loss: 0.8748 - val_acc: 0.7500\nEpoch 12/15\n18/18 [==============================] - 45s 2s/step - loss: 0.9093 - acc: 0.7309 - val_loss: 0.8743 - val_acc: 0.7500\nEpoch 13/15\n18/18 [==============================] - 43s 2s/step - loss: 0.9112 - acc: 0.7200 - val_loss: 0.8690 - val_acc: 0.7500\nEpoch 14/15\n18/18 [==============================] - 43s 2s/step - loss: 0.9861 - acc: 0.7014 - val_loss: 0.8903 - val_acc: 0.7500\nEpoch 15/15\n18/18 [==============================] - 43s 2s/step - loss: 0.8902 - acc: 0.7298 - val_loss: 0.8778 - val_acc: 0.7500\n",
          "name": "stdout"
        }
      ]
    },
    {
      "metadata": {
        "trusted": true,
        "_uuid": "6823c8dc01df8dc5fadee60b6a5dc29786243a50",
        "scrolled": true
      },
      "cell_type": "code",
      "source": "#Prediction\n\npredict = model.predict(Xtest, batch_size=BS, verbose = 1, steps = None)\nprint(predict)\nevaluate = model.evaluate(Xtest, testY, verbose = 1, steps = None)\nprint(evaluate)",
      "execution_count": 36,
      "outputs": [
        {
          "output_type": "stream",
          "text": "200/200 [==============================] - 4s 22ms/step\n[[0.68835706 0.08070312 0.16987018 0.03829456 0.02277512]\n [0.68866    0.08048992 0.16984025 0.03826274 0.02274704]\n [0.6856521  0.08152015 0.1711861  0.03865978 0.02298188]\n [0.6823423  0.08249386 0.17277141 0.0391253  0.02326723]\n [0.6880254  0.08074418 0.17085521 0.03783725 0.02253792]\n [0.69267356 0.07945088 0.16867344 0.03706479 0.02213732]\n [0.68609774 0.08114988 0.17140809 0.03852381 0.02282062]\n [0.68348694 0.08206982 0.1724222  0.03891937 0.02310171]\n [0.67876506 0.08342263 0.1749592  0.03943069 0.02342248]\n [0.6838793  0.08214154 0.17235947 0.03863408 0.02298552]\n [0.68516016 0.08135632 0.1720204  0.03860576 0.02285733]\n [0.68575704 0.08104354 0.17184193 0.03855123 0.02280621]\n [0.6830506  0.08228759 0.17280456 0.03876367 0.0230936 ]\n [0.68235636 0.08257339 0.17296417 0.03892393 0.02318219]\n [0.683799   0.08190469 0.1724326  0.03885568 0.02300798]\n [0.6872612  0.08088204 0.17057723 0.03844559 0.022834  ]\n [0.683321   0.08211461 0.17300367 0.0386324  0.02292831]\n [0.67956156 0.08328783 0.17445646 0.03934537 0.02334877]\n [0.6796467  0.08339561 0.1739574  0.03952483 0.02347541]\n [0.68007827 0.08326388 0.17362626 0.03951569 0.02351582]\n [0.68526155 0.08155759 0.17158823 0.03868631 0.02290635]\n [0.68387693 0.08200702 0.1721911  0.03888259 0.02304231]\n [0.6916449  0.07970135 0.16841847 0.03774346 0.02249176]\n [0.69184333 0.07968365 0.16764091 0.0380085  0.02282367]\n [0.6773964  0.08385547 0.17558621 0.03966339 0.02349848]\n [0.68312484 0.08215704 0.1731953  0.03859713 0.02292565]\n [0.68235576 0.08262024 0.17227167 0.03927885 0.0234735 ]\n [0.6833096  0.08223757 0.17205815 0.03908389 0.02331085]\n [0.6787721  0.08343959 0.17483316 0.03954471 0.0234106 ]\n [0.67974424 0.08314054 0.17439812 0.03941847 0.02329871]\n [0.6787507  0.08349337 0.17493889 0.03942391 0.02339312]\n [0.678745   0.08346923 0.17495155 0.03944749 0.02338677]\n [0.6783063  0.08363105 0.17505927 0.03955486 0.02344839]\n [0.6786425  0.08349119 0.17496054 0.03949578 0.02341002]\n [0.68638355 0.0812554  0.17071638 0.03856175 0.02308288]\n [0.6862637  0.08132428 0.17064595 0.03868944 0.0230766 ]\n [0.6803095  0.08307966 0.17413127 0.03921124 0.02326844]\n [0.68013114 0.08315073 0.17410772 0.0392749  0.02333564]\n [0.6843641  0.0818279  0.17249088 0.03843584 0.02288127]\n [0.68549424 0.0814755  0.17203856 0.03824539 0.02274633]\n [0.6784751  0.0835747  0.17479926 0.03963209 0.02351896]\n [0.67941284 0.08328513 0.17433801 0.03950211 0.02346186]\n [0.6934145  0.07960888 0.16707605 0.03735774 0.02254279]\n [0.69572484 0.07891149 0.16619769 0.03691818 0.02224771]\n [0.68345374 0.08203048 0.17253007 0.03893465 0.02305107]\n [0.6833366  0.08209568 0.17260195 0.03892026 0.02304558]\n [0.6803644  0.08302721 0.17380963 0.03937955 0.02341928]\n [0.68251395 0.08252009 0.17226352 0.03923029 0.02347212]\n [0.67802364 0.08369227 0.17525013 0.03957533 0.02345869]\n [0.6792962  0.08336775 0.17456189 0.03939294 0.02338112]\n [0.6802724  0.08309647 0.1741004  0.03922203 0.02330868]\n [0.6800097  0.08318067 0.17419556 0.03927885 0.02333523]\n [0.6824936  0.08233926 0.17332903 0.03884565 0.02299249]\n [0.6826543  0.08229227 0.17325933 0.03881758 0.02297643]\n [0.6868149  0.08121147 0.17084427 0.03829649 0.02283289]\n [0.68618023 0.0814078  0.1710949  0.03840591 0.02291121]\n [0.68641144 0.0811777  0.17094864 0.03851703 0.02294516]\n [0.68500537 0.08169282 0.17148522 0.03873495 0.02308165]\n [0.690342   0.07998082 0.1688456  0.03806483 0.02276676]\n [0.68001044 0.08314168 0.17400792 0.0394041  0.02343578]\n [0.68052787 0.08305679 0.17381878 0.03922335 0.02337321]\n [0.68031603 0.08310509 0.1739029  0.0392744  0.02340164]\n [0.6837734  0.08193856 0.17287019 0.03856936 0.02284853]\n [0.6857116  0.08148785 0.17169295 0.03833082 0.02277676]\n [0.6889187  0.08029936 0.17009316 0.03813083 0.02255793]\n [0.6795633  0.08327121 0.17411308 0.03952987 0.02352261]\n [0.675279   0.08446399 0.17649774 0.04007117 0.02368815]\n [0.6775806  0.08377836 0.17554122 0.03965073 0.02344914]\n [0.68509614 0.081576   0.1719587  0.03857289 0.02279631]\n [0.6925449  0.0791876  0.16850087 0.03755794 0.02220869]\n [0.68117917 0.08284237 0.17340553 0.03923305 0.02333988]\n [0.6813124  0.08281396 0.17327146 0.03923162 0.02337066]\n [0.67923695 0.08341879 0.17420778 0.03958629 0.02355029]\n [0.6796324  0.0832594  0.17405032 0.03955266 0.02350516]\n [0.68753624 0.08122256 0.1684134  0.03912691 0.02370079]\n [0.6849632  0.08215754 0.16909662 0.03968319 0.0240994 ]\n [0.6786756  0.0835098  0.17490955 0.03947503 0.02343004]\n [0.6787968  0.08348573 0.17482749 0.03946242 0.02342753]\n [0.68475    0.08181009 0.17172566 0.03872442 0.02298982]\n [0.6898805  0.08021642 0.1691059  0.03810294 0.02269424]\n [0.6833922  0.08200006 0.1724835  0.03896794 0.02315626]\n [0.694035   0.07882953 0.16733555 0.03752145 0.02227852]\n [0.6950528  0.07868765 0.16647314 0.03741047 0.02237593]\n [0.68499684 0.08163799 0.17154838 0.03878377 0.02303292]\n [0.682972   0.0825736  0.17129177 0.03941848 0.02374407]\n [0.6839228  0.08241244 0.17041412 0.0393931  0.0238576 ]\n [0.68439406 0.0818308  0.17255163 0.03841714 0.02280631]\n [0.682407   0.08240371 0.1733929  0.0387672  0.02302904]\n [0.683102   0.08245439 0.17170852 0.03921974 0.02351528]\n [0.6839022  0.08226451 0.17112423 0.03916447 0.0235445 ]\n [0.6798615  0.083084   0.17430867 0.03946686 0.02327896]\n [0.6769331  0.08396267 0.17551862 0.0399528  0.02363287]\n [0.6828922  0.08232976 0.173102   0.0386531  0.02302298]\n [0.68313473 0.08222723 0.17308195 0.03859536 0.02296074]\n [0.67970914 0.08322791 0.17423435 0.03943775 0.02339078]\n [0.67940164 0.08334824 0.17432402 0.03948757 0.02343857]\n [0.68415636 0.08194396 0.17225644 0.03867293 0.02297038]\n [0.6839716  0.08201174 0.17230383 0.03870957 0.0230032 ]\n [0.68051344 0.08320554 0.17287585 0.03965485 0.02375027]\n [0.6811506  0.08303563 0.17239854 0.03963542 0.02377983]\n [0.6804279  0.08303774 0.1738695  0.03933936 0.02332539]\n [0.6793127  0.08334889 0.17446738 0.0394803  0.0233907 ]\n [0.68449396 0.08182321 0.17176446 0.03881333 0.02310505]\n [0.68516105 0.08179196 0.17100304 0.03882731 0.02321656]\n [0.69589996 0.07849827 0.16567153 0.03740445 0.02252574]\n [0.6936545  0.07938729 0.16588762 0.03797567 0.02309495]\n [0.68147177 0.0826696  0.17379029 0.03895506 0.0231134 ]\n [0.6811849  0.08271895 0.17393981 0.03903057 0.0231257 ]\n [0.68735045 0.08083529 0.1714851  0.03790181 0.02242731]\n [0.6899422  0.08009069 0.17026103 0.03748272 0.02222349]\n [0.68327236 0.08243215 0.17207402 0.0389105  0.02331102]\n [0.6878062  0.08107083 0.17035308 0.03805027 0.02271968]\n [0.6764567  0.08412685 0.17596853 0.03985583 0.02359219]\n [0.6774305  0.08383753 0.17557089 0.03968273 0.02347837]\n [0.6855081  0.08142543 0.17162102 0.03856486 0.02288064]\n [0.68775314 0.08070287 0.17057179 0.03826791 0.02270428]\n [0.68812585 0.0807787  0.16971025 0.03844124 0.02294401]\n [0.68674254 0.08114381 0.17042883 0.0386274  0.02305748]\n [0.68176615 0.08256082 0.1731436  0.0392445  0.02328501]\n [0.6814012  0.08264009 0.17343803 0.0392541  0.02326662]\n [0.6741645  0.08479971 0.17690359 0.04033336 0.02379883]\n [0.6753393  0.08443107 0.17642494 0.04012558 0.02367912]\n [0.680863   0.08282284 0.17426199 0.03897963 0.02307255]\n [0.68072766 0.08285527 0.17434135 0.03899857 0.02307716]\n [0.6727552  0.08520514 0.17748499 0.04058905 0.02396568]\n [0.6780005  0.08361066 0.17523123 0.03969158 0.02346596]\n [0.6825795  0.08247807 0.17250617 0.03909788 0.02333844]\n [0.68193614 0.08266682 0.1727374  0.03922895 0.02343063]\n [0.67947716 0.08321086 0.17452176 0.03944851 0.0233417 ]\n [0.6802693  0.08289859 0.1741248  0.03939681 0.02331048]\n [0.6884676  0.08028146 0.17087755 0.0379882  0.02238524]\n [0.68982875 0.08015197 0.16929738 0.03807702 0.02264489]\n [0.6780342  0.08365589 0.17531705 0.03955925 0.02343355]\n [0.67750794 0.08380058 0.1755417  0.03966285 0.02348694]\n [0.68948066 0.08026878 0.1692986  0.03817353 0.02277835]\n [0.6913782  0.07966645 0.16836707 0.03793139 0.02265699]\n [0.6803332  0.08291329 0.17421512 0.03930741 0.02323099]\n [0.68632954 0.08126386 0.1709859  0.03853172 0.02288902]\n [0.68336934 0.08210137 0.17294596 0.03867293 0.0229104 ]\n [0.68052423 0.08293086 0.17421654 0.03914216 0.02318609]\n [0.68047506 0.0831347  0.17375651 0.03922673 0.02340703]\n [0.68021107 0.08321891 0.17383933 0.03931264 0.02341797]\n [0.68319744 0.08220639 0.17296408 0.03865663 0.0229755 ]\n [0.6841396  0.08191853 0.17258202 0.0385044  0.02285547]\n [0.6787263  0.08353256 0.17479838 0.03948773 0.02345508]\n [0.6810036  0.08285891 0.17378768 0.03910997 0.02323984]\n [0.684885   0.08161297 0.17184177 0.03867053 0.02298975]\n [0.6834814  0.08215852 0.17231138 0.0388863  0.02316245]\n [0.6832034  0.08216408 0.17298774 0.03868433 0.02296038]\n [0.6831776  0.0821712  0.17298728 0.03869987 0.02296403]\n [0.68111205 0.08282006 0.17347991 0.03926228 0.02332565]\n [0.68143225 0.08275052 0.17327671 0.03921106 0.0233296 ]\n [0.68010473 0.08303256 0.17424475 0.03935191 0.02326604]\n [0.6777125  0.08379248 0.1752212  0.03973577 0.02353801]\n [0.6816179  0.08259736 0.17347953 0.03912176 0.02318351]\n [0.6881238  0.08064782 0.17037454 0.03818315 0.0226707 ]\n [0.6798418  0.08311363 0.17431732 0.0394142  0.02331302]\n [0.6825525  0.08229148 0.17309842 0.0390062  0.02305138]\n [0.679902   0.08308792 0.17433034 0.03938368 0.02329608]\n [0.68342227 0.08193994 0.17270654 0.03891094 0.02302024]\n [0.68797255 0.08077779 0.17089188 0.03786737 0.02249043]\n [0.6788962  0.0834516  0.17481951 0.039444   0.02338873]\n [0.67848104 0.08349847 0.17515256 0.03948757 0.02338037]\n [0.6787007  0.08344744 0.17504838 0.03945186 0.02335163]\n [0.68767375 0.08067918 0.17069785 0.03828817 0.02266107]\n [0.6883268  0.08083055 0.16938679 0.03847852 0.02297744]\n [0.6853731  0.08173428 0.1711714  0.0386103  0.0231109 ]\n [0.68548393 0.08174424 0.17103916 0.03861281 0.02311991]\n [0.6778542  0.08371072 0.17532788 0.03962901 0.02347827]\n [0.6783654  0.08363113 0.17496946 0.03956516 0.02346889]\n [0.6867269  0.08082427 0.17148131 0.03835139 0.02261596]\n [0.68779147 0.08050742 0.17088291 0.03824281 0.02257547]\n [0.69557154 0.07865207 0.16713172 0.03672459 0.02192009]\n [0.692766   0.07958059 0.16809714 0.03726919 0.02228712]\n [0.67620724 0.08420761 0.17589395 0.04001858 0.0236726 ]\n [0.6787842  0.08347164 0.17458819 0.03964588 0.0235101 ]\n [0.6815274  0.08264194 0.17333788 0.03924868 0.02324418]\n [0.6837949  0.08200902 0.17229927 0.03887462 0.02302222]\n [0.688807   0.08050077 0.1697305  0.03820486 0.02275689]\n [0.68245596 0.08240224 0.17284356 0.03905516 0.02324313]\n [0.6781063  0.08346446 0.17536885 0.0396586  0.02340177]\n [0.68039685 0.08277214 0.1743827  0.03927749 0.0231708 ]\n [0.6833916  0.08215667 0.17247087 0.03884942 0.02313158]\n [0.687095   0.08118091 0.17020537 0.03845677 0.02306193]\n [0.67934585 0.08337525 0.17443784 0.03939061 0.0234505 ]\n [0.68121046 0.08304643 0.17305203 0.03922271 0.02346841]\n [0.6806799  0.08291149 0.17401607 0.0391448  0.02324776]\n [0.6777886  0.08373307 0.17534782 0.03964409 0.02348639]\n [0.6812863  0.08276828 0.1731914  0.03936372 0.02339037]\n [0.6807665  0.08288328 0.17358014 0.03939459 0.02337549]\n [0.68456036 0.08212198 0.17133978 0.03873355 0.02324441]\n [0.6858511  0.0819062  0.1702664  0.03864237 0.02333394]\n [0.6771016  0.08396305 0.17549938 0.03985727 0.02357856]\n [0.6788936  0.08335767 0.17476553 0.03958021 0.02340286]\n [0.6826581  0.082683   0.17182034 0.03928218 0.02355643]\n [0.6822918  0.08281022 0.1719956  0.03931952 0.0235828 ]\n [0.6782863  0.08367523 0.17458019 0.03980266 0.02365567]\n [0.67991513 0.08327525 0.17352508 0.03965081 0.02363373]\n [0.68393546 0.08185975 0.17254391 0.03875717 0.02290363]\n [0.684607   0.08164608 0.1721921  0.03867245 0.02288245]]\n",
          "name": "stdout"
        },
        {
          "output_type": "stream",
          "text": "200/200 [==============================] - 5s 23ms/step\n[0.757010612487793, 0.785]\n",
          "name": "stdout"
        }
      ]
    },
    {
      "metadata": {
        "trusted": true,
        "_uuid": "837b3e2f8e4d6871f04c0b9e00a4b708a1810bcd"
      },
      "cell_type": "code",
      "source": "",
      "execution_count": null,
      "outputs": []
    },
    {
      "metadata": {
        "trusted": true,
        "_uuid": "6a8e2924fcb7766b53ab71435c45671b2b6c699a"
      },
      "cell_type": "code",
      "source": "",
      "execution_count": null,
      "outputs": []
    },
    {
      "metadata": {
        "trusted": true,
        "_uuid": "5500f6b64267580f5cc26be91835f511a075eb5b"
      },
      "cell_type": "code",
      "source": "",
      "execution_count": null,
      "outputs": []
    },
    {
      "metadata": {
        "trusted": true,
        "_uuid": "9f2063de29763bd352e978cd6e4cd370735b9db1"
      },
      "cell_type": "code",
      "source": "",
      "execution_count": null,
      "outputs": []
    },
    {
      "metadata": {
        "trusted": true,
        "_uuid": "85bf9813c44a52a86d8ef68815c5c0ec3cce84ae"
      },
      "cell_type": "code",
      "source": "",
      "execution_count": null,
      "outputs": []
    }
  ],
  "metadata": {
    "kernelspec": {
      "display_name": "Python 3",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "name": "python",
      "version": "3.6.6",
      "mimetype": "text/x-python",
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "pygments_lexer": "ipython3",
      "nbconvert_exporter": "python",
      "file_extension": ".py"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 1
}